- f = local_assigns.fetch(:f)
- name = local_assigns.fetch(:name)
- scope = local_assigns.fetch(:scope)
- type = local_assigns.fetch(:type, :string).to_s.inquiry
- fake = local_assigns.fetch(:fake, "")
- autocomplete = local_assigns.fetch(:autocomplete, "off")
- data_form_type = local_assigns.fetch(:data_form_type, "other")
- value = local_assigns.fetch(:value) { f.object.public_send(name) }
- label_name = type.phone? ? "#{name}_national" : name
- required = local_assigns.fetch(:required, false)
- options = local_assigns.fetch(:options, [])
- datas = local_assigns.fetch(:data, {})
- translation_name = local_assigns.fetch(:translation_name, name)
- if options&.first && !options.first.is_a?(Array)
  - options = options.map { |value| [value, value] }

.p
  = f.label label_name, t(".#{scope}.#{translation_name}.label")

  - if type.string?
    div(data-controller="name")
      = f.text_field name, autocomplete: autocomplete, data: { form_type: data_form_type, name_target: "input", **datas }, value: value, required: required
      .text-red-600(data-name-target="error")
  - elsif type.text?
    = f.text_area name, autocomplete: autocomplete, data: { form_type: data_form_type, name_target: "input", **datas }, value: value, required: required
  - elsif type.email?
    div(data-controller="email")
      = f.text_field name, autocomplete: autocomplete, data: { form_type: data_form_type, email_target: "input", **datas }, value: value, required: required
      .text-red-600(data-email-target="error")

  - elsif type.password?
    div(data-controller="password")
      .flex.gap-2.items-center
        = f.password_field name, autocomplete: autocomplete, data: { form_type: data_form_type, password_target: "input", **datas }, value: value, required: required
        = link_to "#", data: { password_target: "show", action: "password#show" } do
          = heroicon "eye"
          .sr-only= t(".password.show_password")
        = link_to "#", data: { password_target: "hide", action: "password#hide" } do
          = heroicon "eye-slash"
          .sr-only= t(".password.hide_password")
      .text-red-600(data-password-target="error")

  - elsif type.phone?
    div(data-controller="phone")
      = f.hidden_field name, data: { phone_target: "hidden" }
      = telephone_field_tag "#{name}_national", "", autocomplete: autocomplete, data: { phone_target: "input", form_type: data_form_type, **datas }, value: value, required: required
      .text-red-600(data-phone-target="error")

  - elsif type.yes_no?
    div
      => f.radio_button name, true, data: datas
      => f.label name, t(".yes_no.yes"), value: true, class: "inline-block"
    div
      => f.radio_button name, false, data: datas
      => f.label name, t(".yes_no.no"), value: false, class: "inline-block"

  - elsif type.list?
    - options.each do |option_text, option_value, option_disabled = false|
      div
        => f.radio_button name, option_value, data: datas, checked: value.to_s == option_value.to_s, disabled: option_disabled
        => f.label name, option_text, value: option_value, class: "inline-block #{option_disabled ? "text-gray-600" : ""}"

  - elsif type.select?
    = f.select name, options.map { |option| option + [{ selected: value.to_s == option[1].to_s }] }, data: datas

  .prose.text-gray-600.text-sm= t(".#{scope}.#{translation_name}.hint_html")
  .text-gray-600.text-sm= fake
