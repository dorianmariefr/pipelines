- content_for(:title) do
  .flex.items-center.gap-2
    = @pipeline.name.presence || @pipeline.id
    - if @pipeline.published?
      = link_to pipelines_path, title: t(".published") do
        = heroicon "globe-alt"

.flex.gap-4
  - if can?(:process_now, @pipeline)
    .p= button_to t(".process"), [@pipeline, :process_now], method: :post, class: "button--primary"

  - if current_user
    .p= button_to t(".duplicate"), [@pipeline, :duplicate], method: :post

- if can?(:process_now, @pipeline) && @pipeline.error.present?
  p.text-red-600= @pipeline.error
  = simple_format @pipeline.backtrace

= render "users/user", user: @pipeline.user, size: :small

- @sources.each do |source|
  = render "sources/source", source: source

- @destinations.each do |destination|
  = render "destinations/destination", destination: destination

- if can? :update, @pipeline
  p= link_to t(".edit"), [:edit, @pipeline], class: "button"

- if can? :destroy, @pipeline
  .p= button_to t(".delete"), @pipeline, method: :delete, class: "button--red", data: { turbo_confirm: t(".confirm") }

p= link_to t(".rss"), pipeline_path(@pipeline, format: :rss), class: "button"

- if @items.any?
  .text-center.mb-4
    = paginate @items

  - @items.each do |item|
    = render "items/item", item: item

  .text-center.mb-4
    = paginate @items

  - if can? :destroy_all, @pipeline
    .p.text-center= button_to t(".delete_all_items"), [:destroy_all, @pipeline, :items], method: :delete, class: "button--red"
